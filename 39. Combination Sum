class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        int n = candidates.length;
        backtrack(0,n,target,candidates,ans,temp);
        return ans;
        
    }

    void backtrack(int i, int n,int target,int[] candidates,List<List<Integer>> ans,List<Integer> temp){

        if(target==0){
            ans.add(new ArrayList<>(temp));
            return;
        }
        if(i>=n||target<0){
            return;
        }
    
        //take and try to take more 
        temp.add(candidates[i]);
        backtrack(i,n,target-candidates[i],candidates,ans,temp);
        //leave
        temp.remove(temp.size()-1);//undo the choice
        backtrack(i+1,n,target,candidates,ans,temp);



    }
}
